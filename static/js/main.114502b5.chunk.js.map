{"version":3,"sources":["components/MediaCard.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","containers/App.js","theme.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","height","maxWidth","backgroundColor","lightBlue","media","MediaCard","props","id","name","email","classes","Card","key","className","CardActionArea","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","color","CardList","cardList","arr","map","item","i","Grid","container","justify","spacing","theme","margin","width","SearchBox","searchChange","noValidate","TextField","label","onChange","ErrorBoundry","state","hasError","this","setState","children","React","Component","App","onSearchChange","e","searchField","target","value","console","log","robots","fetch","then","response","json","users","catch","error","filteredRobots","filter","robot","toLowerCase","includes","length","Container","Box","align","createMuiTheme","palette","background","default","green","A200","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.114502b5.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\n// import CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { lightBlue } from '@material-ui/core/colors';\r\n// import Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: 320,\r\n        maxWidth: 200,\r\n        backgroundColor: lightBlue[300],\r\n    },\r\n    media: {\r\n        height: 200,\r\n    },\r\n});\r\n\r\nfunction MediaCard(props) {\r\n    const { id, name, email } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card key={id} className={classes.root}>\r\n            <CardActionArea>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`https://robohash.org/${id}.png?size=200x200`}\r\n                    title=\"Robot\"\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {name}\r\n                    </Typography>\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textSecondary\"\r\n                        component=\"p\"\r\n                    >\r\n                        {email}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default MediaCard;\r\n","import React from 'react';\r\nimport MediaCard from './MediaCard';\r\n\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//     },\r\n// }));\r\n\r\nfunction CardList(props) {\r\n    const { arr } = props;\r\n    // const classes = useStyles();\r\n\r\n    const cardList = arr.map((item, i) => {\r\n        return (\r\n            <Grid key={i} item>\r\n                <MediaCard id={item.id} email={item.email} name={item.name} />\r\n            </Grid>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justify=\"center\" spacing={1}>\r\n                {cardList}\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { lightBlue } from '@material-ui/core/colors';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '40ch',\r\n            color: lightBlue[100],\r\n        },\r\n    },\r\n}));\r\n\r\nfunction SearchBox(props) {\r\n    const { searchChange } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <form className={classes.root} noValidate>\r\n            <TextField\r\n                id=\"filled-basic\"\r\n                label=\"Search\"\r\n                variant=\"filled\"\r\n                color=\"primary\"\r\n                onChange={searchChange}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            hasError: false,\r\n        };\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h6>Something went wrong</h6>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Container from '@material-ui/core/Container';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n// import Scroll from './components/Scroll';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import Grid from '@material-ui/core/Grid';\r\n// import Paper from '@material-ui/core/Paper';\r\n// import CardList from './CardList';\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         alignItems: 'center',\r\n//     },\r\n//     // paper: {\r\n//     //     padding: theme.spacing(2),\r\n//     //     textAlign: 'center',\r\n//     //     color: theme.palette.text.secondary,\r\n//     // },\r\n// }));\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: '',\r\n        };\r\n    }\r\n\r\n    onSearchChange = (e) => {\r\n        // put the value in searchField\r\n        this.setState({ searchField: e.target.value });\r\n        console.log(this.state.searchField);\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then((response) => response.json())\r\n            .then((users) => this.setState({ robots: users }))\r\n            .catch(console.error('fetch failed'));\r\n    }\r\n\r\n    render() {\r\n        const { robots, searchField } = this.state;\r\n        const filteredRobots = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(searchField);\r\n        });\r\n\r\n        if (!robots.length) {\r\n            return (\r\n                <Typography variant=\"h6\" color=\"primary\">\r\n                    Loading..\r\n                </Typography>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <Container maxWidth=\"lg\">\r\n                <Box align=\"center\" margin={3}>\r\n                    <Typography variant=\"h4\" color=\"primary\">\r\n                        ROBOFRIENDS\r\n                    </Typography>\r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                </Box>\r\n                {/* <Scroll> */}\r\n                <ErrorBoundry>\r\n                    <CardList arr={filteredRobots} />\r\n                </ErrorBoundry>\r\n                {/* </Scroll> */}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// import { red } from '@material-ui/core/colors';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\n// A custom theme for this app\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        background: {\r\n            default: green.A200,\r\n        },\r\n    },\r\n});\r\n\r\nexport default theme;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\n// import './index.css';\r\nimport App from './containers/App';\r\nimport theme from './theme';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}